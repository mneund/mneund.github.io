<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dependency Injection on ...</title>
    <link>https://blog.mneundorfer.de/tags/dependency-injection/</link>
    <description>Recent content in Dependency Injection on ...</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 24 Jan 2018 21:01:00 +0100</lastBuildDate>
    
	<atom:link href="https://blog.mneundorfer.de/tags/dependency-injection/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Service Lifecycles in .NET Core</title>
      <link>https://blog.mneundorfer.de/tech/netcore-di-lifetimes/</link>
      <pubDate>Wed, 24 Jan 2018 21:01:00 +0100</pubDate>
      
      <guid>https://blog.mneundorfer.de/tech/netcore-di-lifetimes/</guid>
      <description>Intro The official documentation only has a brief overview of the available lifetimes of services when using the DI mechanism of .NET Core. An additional great explanation of the lifetimes themselves can be found in this extensive answer on SO.
Although it seems trivial at first, I had to find out the hard way what it actually means when programming a real-life application.
First of all, a short sum-up of the two resources given above: Services in .</description>
    </item>
    
  </channel>
</rss>